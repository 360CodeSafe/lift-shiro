***YOU MUST USE LIFT 2.4-M4 FOR THIS PLUGIN TO WORK***

First, add the SBT dependency: 

<pre><code>
  libraryDependencies += "eu.getintheloop" %% "lift-shiro" % "0.0.3"
</code></pre>

Next, you need to  add this to the web.xml within your project in order to initialise the Shiro context when your application receives a request:

<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;org.apache.shiro.web.env.EnvironmentLoaderListener&lt;/listener-class&gt;
  &lt;/listener&gt;
  &lt;filter&gt;
    &lt;filter-name&gt;ShiroFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.apache.shiro.web.servlet.ShiroFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;ShiroFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</code></pre>

Next, you need to add some configuration to your Boot.scala like so:

<pre><code>class Boot {
  def boot {
    import shiro.Shiro
    import shiro.sitemap.Locs._
    Shiro.init()
    ...
  }
}
</code></pre>

By default this uses the Shiro <code>IniSecurityManagerFactory</code> meaning you need to supply a shiro.ini at the root of your classpath that uses the Shiro ini configuration style. If however you want to use another security manager, you simply supply it into the init() method like so:

<pre><code>Shiro.init(new IniSecurityManagerFactory("classpath:shiro.ini"))
</code></pre>

In order to actually use the integration within your sitemap to restrict access to resources, apply it to your SiteMap like so:

<pre><code>LiftRules.setSiteMap(SiteMap(List(
    Menu("Home") / "index" >> RequireAuthentication,
    Menu("Role Test") / "restricted" >> RequireAuthentication >> HasRole("admin"),
    Menu("Login") / "login" >> RequireNoAuthentication
    ) ::: Shiro.menus: _*
  ))
</code></pre>

There are several <code>LocParam</code> that you can use to augment your <code>Menu</code> structure. Specifically you can use:

* <code>RequireAuthentication</code> - Ensures that users are authenticated, irrespective of roles or permissions
* <code>HasRole("rolename")</code> - Ensures that user has a specific role. 
* <code>HasPermission("somePermission")</code> - Ensures that user has a specific permission.
* <code>LacksPermission("permissionName")</code> - Ensures that user _lacks_ a specific permission.

In addition to using the integration in the SiteMap, you can also use it within your markup using the following snippet technique: 

<pre><code>  &lt;lift:has_role name=&quot;someRole&quot;&gt;
    Some content that is only available to users who have the &quot;someRole&quot; role assigned to them
  &lt;/lift:has_role&gt;
</code></pre>

The snippets this integration wires in are the follow (all are methods on subject/subjects):

* has_role
* lacks_role
* has_permission
* lacks_permission
* has_any_roles

All use the <code>name</code> attribute, with the exception of <code>has_any_roles</code> which takes the <code>roles</code> attribute which contains a comma-delimited list of assigned roles.
